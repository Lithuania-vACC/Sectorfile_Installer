#!/usr/bin/env python3
"""
Generate base64-encoded Python files from image assets.

This script reads all image files from the src/assets folder and creates
corresponding .py files containing the base64-encoded representation of each image.
This is necessary because when compiling with Nuitka, asset files are not included
in the binary, so we embed them as base64 strings in Python code.

Usage:
    python scripts/generate_asset_b64.py
"""

import base64
from pathlib import Path


def generate_b64_files():
    """Generate base64-encoded Python files for all images in src/assets."""
    assets_dir = Path(__file__).parent.parent / "src" / "assets"

    if not assets_dir.exists():
        print(f"Error: Assets directory not found at {assets_dir}")
        return

    image_extensions = {".png", ".jpg", ".jpeg", ".gif", ".bmp", ".ico", ".svg", ".webp"}

    image_files = [f for f in assets_dir.iterdir()
                   if f.is_file() and f.suffix.lower() in image_extensions]

    if not image_files:
        print(f"No image files found in {assets_dir}")
        return

    print(f"Found {len(image_files)} image(s) to process:")
    for img_file in image_files:
        print(f"  - {img_file.name}")

    for img_file in image_files:
        with open(img_file, "rb") as f:
            image_data = f.read()

        # Encode to base64
        b64_data = base64.b64encode(image_data).decode("utf-8")

        # Create the Python filename (replace extension with _b64.py)
        py_filename = img_file.stem + "_b64.py"
        py_filepath = assets_dir / py_filename

        # Generate the Python file content
        py_content = f'''"""
Auto-generated base64-encoded image data for: {img_file.name}

This file was generated by scripts/generate_asset_b64.py
Do not edit manually - regenerate using the script instead.
"""

# Original filename: {img_file.name}
# File size: {len(image_data)} bytes
IMAGE_B64 = """{b64_data}"""
'''

        # Write the Python file
        with open(py_filepath, "w", encoding="utf-8") as f:
            f.write(py_content)

        print(f" Generated: {py_filename} ({len(b64_data)} chars)")

    print(f"\nSuccessfully generated {len(image_files)} base64 .py file(s)")

if __name__ == "__main__":
    generate_b64_files()
